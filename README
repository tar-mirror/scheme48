; Part of Scheme 48 1.9.  See file COPYING for notices and license.

This is 

Scheme 48 1.9.2 "Tübingen Edition"

a derivative of Scheme 48 0.58, put together by various volunteers
around the Internet, with release management happening in Tübingen,
Germany.  Scheme 48 0.58 was developed by Richard Kelsey and Jonathan
Rees and incorporates PreScheme 0.5 by Richard Kelsey.

Please report bugs to scheme-48-bugs@s48.org, and include
the version number in your message.

Installation instructions in file INSTALL.

A user's guide is in file doc/user-guide.txt.

Recent changes are listed in file doc/news.txt.

Known bugs and things to do in the future are listed in doc/todo.txt.

The license conditions are explained in COPYING.

Send mail to scheme-48-request@s48.org to be put on a
mailing list for announcements, discussion, bug reports, and bug
fixes.

-----

The Scheme 48 root directory is organized as follows (not all files are
listed here):

    README		this file
    WINDOWS.txt		notes on the Windows port
    INSTALL		installation instructions
    COPYING		notices and licenses
    COPYING.rtf		copyright notice in RTF format
    configure		configuration script
    Makefile.in		input to configure
    doc/		some documentation
      scheme48.man	a Unix-style manual page
      manual.ps		manual in Postscript
      manual.pdf        manual in PDF
      html/		manual in html (the root is html/index.html)
      src/		manual sources
      todo.txt		list of improvements we hope to make someday
      news.txt		list of improvements we have already made
      io.txt		how the I/O system works
      deriving.txt      how to create derived versions
    scheme/		scheme source files
      packages.scm	meta-module definitions
      interfaces.scm	system interface definitions
      more-interfaces.scm system interface definitions
      *-packages.scm	module definitions
      bcomp/		the byte-code compiler
      vm/		virtual machine sources (written in Pre-Scheme)
      rts/		run-time system sources
      link/		static linker
      env/		development environment modules (debugger, etc.)
      big/		useful Scheme libraries and extensions ("Big Scheme")
      cml/		Concurrent ML libraries
      alt/		portable implementations of some Scheme 48 features
      opt/		optional code optimizer for the byte-code compiler
      prescheme/	code for running the VM using Scheme 48
      debug/		debugging utilities, tests, etc.
      misc/		very miscellaneous things (e.g. AMB operator)
      posix/		interface to POSIX system calls
      srfi/		SRFI implementations
      sort/		sorting libraries
    ps-compiler/	Pre-Scheme -> C compiler
    c/			c source files
      sysdep.h.in	input to configure
      scheme48vm.c	most of the VM (generated by Pre-Scheme compiler)
      scheme48vm.h	extern declarations for scheme48vm.c
      scheme48vm-prelude.h internal declarations for scheme48vm.c
      scheme48heap.c    storage management (generated by Pre-Scheme compiler)
      scheme48heap.h	extern declarations for scheme48heap.c
      scheme48read-image.c    reading a heap from a file
      scheme48write-image.c   writing a heap to a file
      scheme48image.h	extern declarations for scheme48...-image.c
      scheme48write-barrier.h WRITE_BARRIER(...) macro
      main.c		entry point for the VM
      prescheme.h	part of the VM
      bignum.c		large integers
      bignum.h          declarations for large integers
      bignumint.h	internal declarations for large integers
      external.c	support for calling C and being called from C
      extension.c       default definition of vm_extension()
      scheme48.h	C declarations and macros for Scheme 48 data structures
      scheme48.h.in	template for scheme48.h
      old-scheme48.h	old version, included for compatibility
      c-mods.h		minor additions to the C language
      event.h		header file for OS interface
      io.h		ditto
      fd-io.h		ditto
      srfi-27.c         C-side support for SRFI 27 (random bits)
      asm-glue.c	support code for (upcoming) native code
      unix/             Unix-specific source files
      unix.h		header file for unix/* files
      posix/		C half of interface to POSIX system calls
      fake/		C files for insufficiently POSIX-compliant systems
    build/		code for building the system
      filenames.make	included by Makefile, generated automatically
      filenames.scm	code for generating filenames.make
      initial.image	an image file containing a minimal Scheme system
      initial.debug	debugging database for same
      initial.scm	script for creating initial.image
      build-usual-image	script for creating scheme48.image
      load-linker.exec  script for loading the external linker
      build-external-modules script for creating external-module initializer
      minor-version-number   current version number
      generate-c-header.bat Windows batch file for generating c/scheme48.h
      build-usual-image.bat Windows batch file for creating scheme48.image
      build-initial-image.bat Windows batch file for creating build/initial.image
      i-know-what-i-am-doing.bat Windows batch file for compiling VM to C
      scheme48.wxs      WiX script for generating scheme48.msi
      build/{UnicodeData.txt,PropList.txt,SpecialCasing.txt,CaseFolding.txt,CompositionExclusions.txt}
                        Unicode data files
    emacs/		Emacs support
